为了解决的场景： 使用共享的技术减少对象数量。

享元模式的定义：
    是池技术的重要实现方式，（使用共享对象可有效的支持大量的细粒度的对象。）

内部状态：
    是对象可共享出来的信息，存储在享元对象内部并且不会随环境改变而改变， 如例子中的id, postAddress等。可以作为对象的动态附加信息
    不必直接存储在某个具体的对象中， 属于可以共享的部分。

外部状态：
    对象得以依赖的一个标识，随环境的改变而改变，不可以共享的状态，如key


优点和缺点
    享元模式是一个非常简单的模式，可以大大减少应用程序创建的对象，降低程序内存的占用， 增强程序的性能， 同时提高了系统的复杂性，需要分离出
    外部状态和内部状态；而且外部状态具有固化特性，不应该随内部状态改变而改变，否则导致系统的逻辑混乱

使用场景
    系统中存在大量的相似对象
    需要缓冲池的场景。


线程安全问题
    大多数的情况不需要考虑线程安全问题， 在使用享元模式时，对象池中的享元对象尽量多，多到足够满足业务为止

性能平衡
    尽量使用Java基本类型作为外部状态
    使用自己编写的类作为外部状态，必须复写equal方法和hashCode方法，而且执行效率还比较低，外部状态最好以Java的基本类型作为标志，
    如String、 int等，可以大幅的提升效率。

    FlyWeight是拳击比赛中的特用名词。意思是‘特轻量级’, 用在设计模式中是指我们的类要轻量级，粒度要小，这才是他要表达的意思，粒度小了
    对象就会变多，那就用共享技术来解决。

    具体的应用：
        Mybatis源码中ReuseExecutor对JDBC中的statement对象对了缓存， 当个执行相同的sql时，直接从缓存中取出statement对象进行复用。
        避免了重复频繁创建和销毁statement对象，提高了系统的性能， 这是享元思想的应用。