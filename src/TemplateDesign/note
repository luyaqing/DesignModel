


模板方法的定义：

    定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。

    实现：仅仅使用了java的继承机制


    AbstractClass叫做抽象模板，它的方法分为两类：
    (1) 基本方法

        基本方法也叫做基本操作，是由子类实现的方法，并且在模板方法中被调用
    (2) 模板方法

        可以有一个或几个，一般是一个具体方法，也就是一个框架，实现对基本方法的调度，完成固定的逻辑。

    重点： 钩子方法的使用


    注意点：
            a: 为了防止恶意的操作，一般模板方法都加上final关键字，不允许被复写
            b: 抽象模板中的基本方法尽量设计为protected类型，符合迪米特法则，不需要暴露的属性或方法尽量不要设置为protected类型。
         实现类若非必要，尽量不要扩大父类中的访问权限。


    优点：
           i: 封装不变部分，拓展可变部分
          ii: 提取公共部分代码，便于维护
         iii: 行为由父类控制， 子类实现


    缺点：
           i: 抽象类定义了部分抽象方法，由子类实现，子类执行的结果影响了父类的结果，也就是子类对父类产生了影响，这在复杂的项目中会带来代码
        阅读的难度，而且也会让新手产生不适感。


    使用场景：
              1：多个子类有公有的方法，并且逻辑基本相同时
              2：重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现
              3：重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为。

    项目相关： 加工单换标、组合、拆解。